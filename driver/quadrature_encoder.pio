;
; Copyright (c) 2023 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program quadrature_encoder

; the code must be loaded at address 0, because it uses computed jumps
.origin 0


; the code works by running a loop that continuously shifts the 2 phase pins into
; ISR and looks at the lower 4 bits to do a computed jump to an instruction that
; does the proper "do nothing" | "increment" | "decrement" action for that pin
; state change (or no change)

; ISR holds the last state of the 2 pins during most of the code. The Y register
; keeps the current encoder count and is incremented / decremented according to
; the steps sampled

; the program keeps trying to write the current count to the RX FIFO without
; blocking. To read the current count, the user code must drain the FIFO first
; and wait for a fresh sample (takes ~4 SM cycles on average). The worst case
; sampling loop takes 10 cycles, so this program is able to read step rates up
; to sysclk / 10  (e.g., sysclk 125MHz, max step rate = 12.5 Msteps/sec)

; 00 state
    JMP update    ; read 00
    JMP decrement ; read 01
    JMP increment ; read 10
    JMP update    ; read 11

; 01 state
    JMP increment ; read 00
    JMP update    ; read 01
    JMP update    ; read 10
    JMP decrement ; read 11

; 10 state
    JMP decrement ; read 00
    JMP update    ; read 01
    JMP update    ; read 10
    JMP increment ; read 11

; to reduce code size, the last 2 states are implemented in place and become the
; target for the other jumps

; 11 state
    JMP update    ; read 00
    JMP increment ; read 01
decrement:
    ; note: the target of this instruction must be the next address, so that
    ; the effect of the instruction does not depend on the value of Y. The
    ; same is true for the "JMP X--" below. Basically "JMP Y--, <next addr>"
    ; is just a pure "decrement Y" instruction, with no other side effects
    JMP Y--, update ; read 10

    ; this is where the main loop starts
.wrap_target
update:
    MOV ISR, Y      ; read 11
    PUSH noblock

sample_pins:
    ; we shift into ISR the last state of the 2 input pins (now in OSR) and
    ; the new state of the 2 pins, thus producing the 4 bit target for the
    ; computed jump into the correct action for this state. Both the PUSH
    ; above and the OUT below zero out the other bits in ISR
    OUT ISR, 2
    IN PINS, 2

    ; save the state in the OSR, so that we can use ISR for other purposes
    MOV OSR, ISR
    ; jump to the correct state machine action
    MOV PC, ISR

    ; the PIO does not have a increment instruction, so to do that we do a
    ; negate, decrement, negate sequence
increment:
    MOV Y, ~Y
    JMP Y--, increment_cont
increment_cont:
    MOV Y, ~Y
.wrap    ; the .wrap here avoids one jump instruction and saves a cycle too



% c-sdk {

#include "hardware/clocks.h"
#include "hardware/gpio.h"


// one pio has four sm, so four encoders can be read. The four sm will be
// claimed one by one from 1 to 4. Passing number of encoders to number_of_qua.
// And the first pins of the 4(or 3,2,1) encoders to pins[4].

typedef struct {
    PIO pio;
    uint number_of_qua; // max to 4
    uint pins[4];
    int count_new[4];
    int count_old[4];
} quadrature_t;

// max_step_rate is used to lower the clock of the state machine to save power
// if the application doesn't require a very high sampling rate. Passing zero
// will set the clock to the maximum

static inline void quadrature_encoder_program_init(quadrature_t qua, int max_step_rate)
{
    for (uint i = 0; i < qua.number_of_qua; i++)
    {
        uint button_sm = i;
        pio_sm_set_consecutive_pindirs(qua.pio, button_sm, qua.pin[i], 2, false);
        gpio_pull_up(qua.pins[i]);
        gpio_pull_up(qua.pins[i] + 1);

    
        pio_sm_config c = quadrature_encoder_program_get_default_config(0);

        sm_config_set_in_pins(&c, qua.pin[i]); // for WAIT, IN
        sm_config_set_jmp_pin(&c, qua.pin[i]); // for JMP
        // shift to left, autopull disabled
        sm_config_set_in_shift(&c, false, false, 32);
        // don't join FIFO's
        sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_NONE);

        // passing "0" as the sample frequency,
        if (max_step_rate == 0) {
            sm_config_set_clkdiv(&c, 1.0);
        } else {
            // one state machine loop takes at most 10 cycles
            float div = (float)clock_get_hz(clk_sys) / (10 * max_step_rate);
            sm_config_set_clkdiv(&c, div);
        }

        pio_sm_init(qua.pio, button_sm, 0, &c);
        pio_sm_set_enabled(qua.pio, button_sm, true);
    }
}

static inline void quadrature_encoder_get_count(quadrature_t* qua)
{
    uint ret;
    int n;
    for (uint i = 0; i < qua->number_of_qua; i++)
    {
        uint button_sm = i;
        // if the FIFO has N entries, we fetch them to drain the FIFO,
        // plus one entry which will be guaranteed to not be stale
        n = pio_sm_get_rx_fifo_level(qua->pio, button_sm) + 1;
        while (n > 0) {
            if(pio_sm_is_rx_fifo_empty(qua->pio, button_sm))
                ret = qua->count_new[i];
            else
                ret = pio_sm_get(qua->pio, button_sm);
            n--;
        }
        qua->count_new[i]=ret;
    }
    

}

%}
